plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'com.palantir.git-version' version '0.5.2'
}

final lastTag = versionDetails().lastTag
final gitVersion = gitVersion()
final isRelease = gitVersion == lastTag

version = (isRelease ? gitVersion : gitVersion + "-SNAPSHOT").replaceAll(".dirty", "")

println "GitVersion: ${gitVersion}"
println "LastTag: ${lastTag}"
println "IsRelease: ${isRelease}"
println "Version: ${version}"

compileJava {
    options.compilerArgs = ['-proc:none', '-Xlint:all','-Werror','-Xdiags:verbose']
}

compileTestJava {
    options.compilerArgs = ['-proc:none', '-Xlint:all','-Werror','-Xdiags:verbose']
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://artifactory.broadinstitute.org/artifactory/libs-snapshot/" }
}

dependencies {
    implementation 'org.broadinstitute:gatk-native-bindings:0.1.0-rc-1'
    implementation 'commons-io:commons-io:2.4'
    implementation 'org.apache.logging.log4j:log4j-api:2.5'
    implementation 'org.apache.logging.log4j:log4j-core:2.5'
    testImplementation 'com.intel.gkl:gkl:0.8.2'
    testImplementation 'org.testng:testng:6.9.9'
}

//===================================================================
// build
//===================================================================
final nativeBuildDir = "$buildDir/native"

final tbbDir = "-DTBB_DIR=$projectDir/vcpkg/installed/x64-linux/share/tbb"

task cmakeConfig(type: Exec) {
    // hide stdout, but print stderr
    standardOutput = new ByteArrayOutputStream()
    doFirst {mkdir nativeBuildDir}
    workingDir nativeBuildDir
    commandLine 'cmake', tbbDir, '-Wno-dev', projectDir
    inputs.files fileTree(projectDir) {include '**/CMakeLists.txt'}
    outputs.files "$nativeBuildDir/Makefile"
}

task cmakeBuild(type: Exec) {
    // hide stdout, but print stderr
    standardOutput = new ByteArrayOutputStream()
    workingDir nativeBuildDir
    commandLine 'make'
    // always run this task
    outputs.upToDateWhen {false}
}

task copyNativeLib(type: Copy) {
    from "$buildDir/native/src/main/native/mgl_pairhmm/libmgl_pairhmm.so"
    from "$buildDir/native/src/main/native/mgl_sw/libmgl_sw.so"

    into "$buildDir/classes/java/main/com/microsoft/mgl/native"
}

compileJava.finalizedBy copyNativeLib
copyNativeLib.dependsOn cmakeBuild
cmakeBuild.dependsOn cmakeConfig

//===================================================================
// test
//===================================================================

test {
    useTestNG()
    // propagate system properties to test JVM
    systemProperties = System.getProperties()
    if (project.hasProperty('debug')) {
        jvmArgs '-verbose:jni', '-Xcheck:jni', '-XX:+RestoreMXCSROnJNICalls'
    }
    else {
        jvmArgs '-Xcheck:jni', '-XX:+RestoreMXCSROnJNICalls'
    }
    testLogging {
        if (!System.env.CI.toString().toBoolean()) {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
    // always rerun tests
    outputs.upToDateWhen { false }
}

//===================================================================
// release
//===================================================================

jar {
    // include LICENSE file in jar
    from "LICENSE"
    exclude "log4j2.xml"
}

java {
    withSourcesJar()
    withJavadocJar()
}

signing {
    required { isRelease && gradle.taskGraph.hasTask("publish") }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

tasks.withType(Sign) {
    onlyIf { isRelease }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = isRelease ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = project.getProperty("sonatypeUsername")
                password = project.getProperty("sonatypePassword")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java
            groupId = "com.microsoft.genomics"
            artifactId = "mgl"

            pom {
                name = "Microsoft Genomics Library (MGL)"
                description = "Microsoft Genomics Library contains highly optimized compute cores for genomics applications"
                url = "https://github.com/microsoft/mgl"
                developers {
                    developer {
                        id = "microsoft"
                        name = "Microsoft"
                    }
                }
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://opensource.org/licenses/MIT"
                        distribution = "repo"
                    }
                }
                scm {
                    connection = "scm:git:git@github.com:microsoft/mgl.git"
                    developerConnection = "scm:git:git@github.com:microsoft/mgl.git"
                    url = "https://github.com/microsoft/mgl.git"
                }
            }
        }
    }
}